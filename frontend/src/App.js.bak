import React, { useState, useEffect } from 'react';
import { 
  BrowserRouter as Router, 
  Routes, 
  Route, 
  Navigate, 
  useLocation 
} from 'react-router-dom';
import { Box, Toolbar } from '@mui/material';
import { AppThemeProvider, ThemeContext } from './contexts/ThemeContext';

// Import pages
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import DashboardPage from './pages/DashboardPage';
import CustomersPage from './pages/CustomersPage';
import AddSalePage from './pages/AddSalePage';
import CustomerDetailPage from './pages/CustomerDetailPage';
import SalesHistoryPage from './pages/SalesHistoryPage';
import ProfilePage from './pages/ProfilePage';
import NotificationsPage from './pages/NotificationsPage';
import NotFoundPage from './pages/NotFoundPage';

// Import shared components
import Navbar from './components/Navbar';
import { NotificationProvider } from './components/NotificationSnackbar';

// Layout wrapper for authenticated pages
const PrivateLayout = ({ children }) => {
  // Access theme context
  const { isDarkMode } = useContext(ThemeContext);
  
  return (
    <Box 
      sx={{ 
        display: 'flex', 
        flexDirection: 'column', 
        height: '100vh',
        bgcolor: 'background.default',
        color: 'text.primary',
        transition: 'background-color 0.3s ease, color 0.3s ease'
      }}
    >
      {/* Navbar component */}
      <Navbar />
      
      <Box sx={{ display: 'flex', flexGrow: 1, overflow: 'hidden' }}>
        <Box
          component="main"
          sx={{
            flexGrow: 1,
            p: 3,
            width: '100%',
            overflow: 'auto',
            bgcolor: 'background.default',
            color: 'text.primary',
            transition: 'background-color 0.3s ease, color 0.3s ease',
            borderRadius: 1,
            position: 'relative',
            '&:after': isDarkMode ? {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              height: '4px',
              background: 'linear-gradient(90deg, rgba(0,0,0,0) 0%, rgba(144,202,249,0.1) 50%, rgba(0,0,0,0) 100%)',
              zIndex: 1,
            } : {}
          }}
        >
          <Toolbar />
          {children}
        </Box>
      </Box>
    </Box>
  );
};

// Auth guard component to protect routes
const PrivateRoute = ({ children }) => {
  // Mock auth check (replace with real auth logic)
  const isAuthenticated = localStorage.getItem('token') !== null;
  const location = useLocation();

  return isAuthenticated ? (
    <PrivateLayout>{children}</PrivateLayout>
  ) : (
    <Navigate to="/" state={{ from: location }} replace />
  );
};

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  // Check if user is authenticated on load
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      setIsAuthenticated(true);
    }
  }, []);
      primary: {
        main: isDarkMode ? '#90caf9' : '#0f4c81', // Professional navy blue for light mode
        light: isDarkMode ? '#bbdefb' : '#c7dff1',
        dark: isDarkMode ? '#5d99c6' : '#0a3258',
        contrastText: isDarkMode ? '#000000' : '#ffffff',
      },
      secondary: {
        main: isDarkMode ? '#ce93d8' : '#6a4c93', // Professional purple for light mode
        light: isDarkMode ? '#f3e5f5' : '#d1c4e9',
        dark: isDarkMode ? '#ab47bc' : '#4a3368',
        contrastText: '#ffffff',
      },
      background: {
        default: isDarkMode ? '#121212' : '#f8f9fa', // More professional light gray
        paper: isDarkMode ? '#1e1e1e' : '#ffffff',
        accent: isDarkMode ? '#333333' : '#ebedef',
      },
      text: {
        primary: isDarkMode ? '#f5f5f5' : 'rgba(0, 0, 0, 0.87)',
        secondary: isDarkMode ? '#bdbdbd' : 'rgba(0, 0, 0, 0.6)',
        disabled: isDarkMode ? '#757575' : 'rgba(0, 0, 0, 0.38)',
      },
      divider: isDarkMode ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.08)',
      action: {
        active: isDarkMode ? '#f5f5f5' : 'rgba(0, 0, 0, 0.54)',
        hover: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.04)',
        selected: isDarkMode ? 'rgba(255, 255, 255, 0.16)' : 'rgba(15, 76, 129, 0.08)',
        focus: isDarkMode ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.12)',
        disabled: isDarkMode ? 'rgba(255, 255, 255, 0.3)' : 'rgba(0, 0, 0, 0.26)',
      },
      error: {
        main: isDarkMode ? '#f87171' : '#d32f2f',
        light: isDarkMode ? '#fca5a5' : '#ef5350',
        dark: isDarkMode ? '#ef4444' : '#c62828',
      },
      warning: {
        main: isDarkMode ? '#fbbf24' : '#ed6c02',
        light: isDarkMode ? '#fcd34d' : '#ff9800',
        dark: isDarkMode ? '#f59e0b' : '#e65100',
      },
      info: {
        main: isDarkMode ? '#60a5fa' : '#0288d1',
        light: isDarkMode ? '#93c5fd' : '#03a9f4',
        dark: isDarkMode ? '#3b82f6' : '#01579b',
      },
      success: {
        main: isDarkMode ? '#34d399' : '#2e7d32',
        light: isDarkMode ? '#6ee7b7' : '#4caf50',
        dark: isDarkMode ? '#10b981' : '#1b5e20',
      },
    },
    typography: {
      fontFamily: "'Poppins', 'Roboto', 'Helvetica', 'Arial', sans-serif",
      h1: {
        fontWeight: 600,
        letterSpacing: '-0.02em',
      },
      h2: {
        fontWeight: 600,
        letterSpacing: '-0.01em',
      },
      h3: {
        fontWeight: 600,
        letterSpacing: '0em',
      },
      h4: {
        fontWeight: 600,
        letterSpacing: '0em',
        fontSize: '1.5rem',
      },
      h5: {
        fontWeight: 600,
        letterSpacing: '0em',
        fontSize: '1.25rem',
      },
      h6: {
        fontWeight: 600,
        letterSpacing: '0.01em',
        fontSize: '1rem',
      },
      button: {
        textTransform: 'none',
        fontWeight: 500,
      },
      subtitle1: {
        letterSpacing: '0.01em',
        fontWeight: 500,
      },
      subtitle2: {
        letterSpacing: '0.01em',
        fontWeight: 500,
      },
    },
    shape: {
      borderRadius: 8,
    },
    components: {
      MuiCssBaseline: {
        styleOverrides: {
          '*, *::before, *::after': {
            transition: 'background-color 0.3s ease, color 0.3s ease',
          },
        },
      },
      MuiAppBar: {
        styleOverrides: {
          root: {
            boxShadow: isDarkMode 
              ? '0 4px 12px rgba(0,0,0,0.5)' 
              : '0 2px 10px rgba(0,0,0,0.08)',
            backdropFilter: 'blur(10px)',
            backgroundColor: isDarkMode ? 'rgba(30, 30, 30, 0.95)' : 'rgba(255, 255, 255, 0.95)',
            backgroundImage: 'none',
          }
        }
      },
      MuiCard: {
        styleOverrides: {
          root: {
            boxShadow: isDarkMode 
              ? '0 4px 20px rgba(0,0,0,0.5)' 
              : '0 2px 15px rgba(0,0,0,0.06)',
            backgroundImage: 'none',
            transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',
            '&:hover': {
              transform: 'translateY(-2px)',
              boxShadow: isDarkMode 
                ? '0 6px 25px rgba(0,0,0,0.6)' 
                : '0 5px 20px rgba(0,0,0,0.08)',
            }
          }
        }
      },
      MuiPaper: {
        styleOverrides: {
          root: {
            backgroundImage: 'none',
            transition: 'box-shadow 0.2s ease-in-out',
          },
          elevation1: {
            boxShadow: isDarkMode 
              ? '0 2px 8px rgba(0,0,0,0.4)' 
              : '0 1px 5px rgba(0,0,0,0.05)'
          },
          elevation2: {
            boxShadow: isDarkMode 
              ? '0 3px 10px rgba(0,0,0,0.45)' 
              : '0 2px 8px rgba(0,0,0,0.06)'
          },
          elevation3: {
            boxShadow: isDarkMode 
              ? '0 4px 12px rgba(0,0,0,0.5)' 
              : '0 3px 10px rgba(0,0,0,0.07)'
          }
        }
      },
      MuiButton: {
        styleOverrides: {
          root: {
            borderRadius: '6px',
            padding: '8px 16px',
            fontWeight: 500,
            transition: 'all 0.2s ease-in-out',
            textTransform: 'none',
            '&:hover': {
              transform: 'translateY(-1px)',
              boxShadow: isDarkMode 
                ? '0 4px 12px rgba(0,0,0,0.5)' 
                : '0 4px 10px rgba(0,0,0,0.1)'
            }
          },
          contained: {
            boxShadow: isDarkMode 
              ? '0 2px 8px rgba(0,0,0,0.4)' 
              : '0 2px 6px rgba(0,0,0,0.08)',
            '&.MuiButton-containedPrimary': {
              background: isDarkMode 
                ? 'linear-gradient(45deg, #5c93c8 30%, #90caf9 90%)' 
                : 'linear-gradient(45deg, #0a3258 30%, #0f4c81 90%)',
            },
            '&.MuiButton-containedSecondary': {
              background: isDarkMode 
                ? 'linear-gradient(45deg, #ab47bc 30%, #ce93d8 90%)' 
                : 'linear-gradient(45deg, #4a3368 30%, #6a4c93 90%)',
            },
            '&.MuiButton-containedSuccess': {
              background: isDarkMode 
                ? 'linear-gradient(45deg, #10b981 30%, #34d399 90%)' 
                : 'linear-gradient(45deg, #1b5e20 30%, #2e7d32 90%)',
            },
            '&.MuiButton-containedError': {
              background: isDarkMode 
                ? 'linear-gradient(45deg, #ef4444 30%, #f87171 90%)' 
                : 'linear-gradient(45deg, #c62828 30%, #d32f2f 90%)',
            }
          },
          outlined: {
            borderWidth: '1.5px',
            '&:hover': {
              borderWidth: '1.5px',
            }
          }
        }
      },
      MuiDrawer: {
        styleOverrides: {
          paper: {
            backgroundImage: 'none',
            boxShadow: isDarkMode 
              ? '2px 0 15px rgba(0,0,0,0.5)' 
              : '2px 0 10px rgba(0,0,0,0.1)',
            transition: 'box-shadow 0.3s ease'
          }
        }
      },
      MuiTableCell: {
        styleOverrides: {
          root: {
            borderColor: isDarkMode ? 'rgba(255, 255, 255, 0.08)' : 'rgba(0, 0, 0, 0.08)',
            padding: '16px'
          },
          head: {
            fontWeight: 600,
            backgroundColor: isDarkMode ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.03)'
          }
        }
      },
      MuiTableRow: {
        styleOverrides: {
          root: {
            transition: 'background-color 0.2s ease',
            '&:hover': {
              backgroundColor: isDarkMode ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)'
            }
          }
        }
      },
      MuiDialog: {
        styleOverrides: {
          paper: {
            backgroundImage: 'none',
            boxShadow: isDarkMode 
              ? '0 10px 40px rgba(0,0,0,0.6)' 
              : '0 10px 40px rgba(0,0,0,0.15)',
            borderRadius: '12px',
            overflow: 'hidden'
          }
        }
      },
      MuiChip: {
        styleOverrides: {
          root: {
            borderRadius: '6px',
            fontWeight: 500,
          }
        }
      },
      MuiInputBase: {
        styleOverrides: {
          root: {
            transition: 'box-shadow 0.2s ease-in-out',
            '&.Mui-focused': {
              boxShadow: isDarkMode 
                ? '0 0 0 2px rgba(144, 202, 249, 0.2)' 
                : '0 0 0 2px rgba(15, 76, 129, 0.2)'
            }
          }
        }
      },
      MuiListItem: {
        styleOverrides: {
          root: {
            borderRadius: '6px',
            margin: '2px 0',
            transition: 'background-color 0.2s ease'
          }
        }
      },
    },
  }), [isDarkMode]);
  
  // Theme toggle handler
  const toggleTheme = () => {
    const newMode = !isDarkMode;
    setIsDarkMode(newMode);
    localStorage.setItem('darkMode', newMode.toString());
  };
  
  // Create theme context value
  const themeContextValue = useMemo(() => ({
    isDarkMode,
    toggleTheme
  }), [isDarkMode]);

  return (
    <ThemeContext.Provider value={themeContextValue}>
      <ThemeProvider theme={currentTheme}>
        <NotificationProvider>
          <Router>
            <CssBaseline />
            <Routes>
            {/* Public routes */}
            <Route path="/" element={<LoginPage />} />
            <Route path="/signup" element={<SignupPage />} />
            
            {/* Protected routes */}
            <Route
              path="/dashboard"
              element={
                <PrivateRoute>
                  <DashboardPage />
                </PrivateRoute>
              }
            />
            <Route
              path="/customers"
              element={
                <PrivateRoute>
                  <CustomersPage />
                </PrivateRoute>
              }
            />
            <Route
              path="/customers/:id"
              element={
                <PrivateRoute>
                  <CustomerDetailPage />
                </PrivateRoute>
              }
            />
            <Route
              path="/add-sale"
              element={
                <PrivateRoute>
                  <AddSalePage />
                </PrivateRoute>
              }
            />
            <Route
              path="/sales"
              element={
                <PrivateRoute>
                  <SalesHistoryPage />
                </PrivateRoute>
              }
            />
            <Route
              path="/profile"
              element={
                <PrivateRoute>
                  <ProfilePage />
                </PrivateRoute>
              }
            />
            <Route
              path="/notifications"
              element={
                <PrivateRoute>
                  <NotificationsPage />
                </PrivateRoute>
              }
            />
            
            {/* 404 fallback */}
            <Route path="*" element={<NotFoundPage />} />
          </Routes>
        </Router>
      </NotificationProvider>
    </ThemeProvider>
    </ThemeContext.Provider>
  );
}

export default App;
